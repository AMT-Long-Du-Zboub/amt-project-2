openapi: '3.0.3'
info:
  version: '0.1.0'
  title: Gamification API
  description: An API to use concept in your app
security:
  #  - bearerAuth: []
  - apiKeyAuth: []
paths:
  /registrations:
    get:
      description: list all registerd application
      operationId: getApplications
      responses:
        '200':
          description: list all registerd application
          content:
            'application/json':
              schema:
                title: Registration summary
                type: array
                items:
                  $ref: '#/components/schemas/RegistrationSummary'

    post:
      description: Register a new application
      operationId: addApplication
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Registration'
      responses:
        '201':
          description: Register a new application
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Token'

  /badges:
    get:
      description: list of all badges of an application
      operationId: getBadges
      responses:
        '200':
          description: list of all badges of an application
          content:
            'application/json':
              schema:
                title: Badges summary
                type: array
                items:
                  $ref: '#/components/schemas/BadgeSummary'

    post:
      description: Register a new badge in an application
      operationId: addBadge
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Badge'
      responses:
        '201':
          description: Register a new badge in an application

  /ladders:
    get:
      description: List of all level on a ladders of point
      operationId: getLadders
      responses:
        '200':
          description: List of all level on a ladders of point
          content:
            'application/json':
              schema:
                title: Ladders summary
                type: array
                items:
                  $ref: '#/components/schemas/LadderSummary'

    post:
      description: Register a new level of ladders in an application
      operationId: addLadder
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Ladder'
      responses:
        '201':
          description: Register a new level on the ladders

  /users/{id}:
    get:
      description: get user by id
      operationId: getUserId
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/User'

  /users/{id}/historyPoint:
    get:
      description: get history of an user by id
      operationId: getHistoryByUserId
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/HistoryOfPointForAnUser'


  /users/top10bypoint:
    get:
      description: List the top ten of the user by point
      operationId: top10ByPoint
      responses:
        '200':
          description: list of the top 10 user by point
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/TopTenByPoint'

  /users/{id}/BadgeAwardedHistory:
    get:
      description: List of the badge awarded by an user
      operationId: getBadgeAwardedHistory
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: List of the badge awarded by an user
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/BadgeAwardedHistoryForAnUser'

  /events/:
    post:
      description: Report that a new event has append in the gamified application
      operationId: reportEvent
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Event'

      responses:
        '202':
          description: The platform has accepted the event and will process it

  /rules:
    get:
      description: List of all rules of an application
      operationId: getRules
      responses:
        '200':
          description: List of all rules of an application
          content:
            'application/json':
              schema:
                title: Rules summary
                type: array
                items:
                  $ref: '#/components/schemas/RuleSummary'

    post:
      description: Register a new rule in an application
      operationId: addRule
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Rule'
      responses:
        '201':
          description: Register a new rule in an application

  /auth:
    post:
      description: The info required to authentificate an application
      operationId: authenticateApplicationAndGetToken
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        '200':
          description: Authentification successful
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          description: Authentification failed

components:
  securitySchemes:
    #      bearerAuth:            # arbitrary name for the security scheme
    #      type: http
    #      scheme: bearer       # warning: it HAS TO be a lowercase b for the swagger ui version used in springfox
    #      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
  schemas:

    RegistrationSummary:
      type: object
      properties:
        applicationName:
          type: string

    Registration:
      type: object
      properties:
        applicationName:
          type: string
        password:
          type: string

    Credentials:
      type: object
      properties:
        applicationName:
          type: string
        password:
          type: string

    Token:
      type: object
      properties:
        apiKey:
          type: string

    Event:
      type: object
      properties:
        type:
          type: string
        userId:
          type: string
        timestamp:
          type: string
          format: date-time
        properties:
          type: object

    User:
      type: object
      properties:
        userId:
          type: string
        nbrPointOfUser:
          type: integer
        LadderOfUser:
          $ref: '#/components/schemas/LadderSummary'
        badges:
          type: array
          items:
            $ref: '#/components/schemas/BadgeSummary'

    UserPoint:
      type: object
      properties:
        userId:
          type: string
        nbrPoint:
          type: integer
        level:
          type: integer

    TopTenByPoint:
      type: object
      properties:
        lists:
          type: array
          items:
            $ref: '#/components/schemas/UserPoint'
          maxItems: 10

    BadgeAwardedHistory:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        date:
          type: string

    BadgeAwardedHistoryForAnUser:
      type: object
      properties:
        history:
          type: array
          items:
            $ref: '#/components/schemas/BadgeAwardedHistory'

    HistoryOfPoint:
      type: object
      properties:
        date:
          type: string
        pointAwarded:
          type: integer
        totalAfter:
          type: integer

    HistoryOfPointForAnUser:
      type: object
      properties:
        history:
          type: array
          items:
            $ref: '#/components/schemas/HistoryOfPoint'

    BadgeSummary:
      type: object
      properties:
        name:
          type: string
        description:
          type: string

    Badge:
      type: object
      properties:
        name:
          type: string
        description:
          type: string

    LadderSummary:
      type: object
      properties:
        level:
          type: integer
        title:
          type: string
        nbrPoint:
          type: integer

    Ladder:
      type: object
      properties:
        level:
          type: integer
        title:
          type: string
        nbrPoint:
          type: integer

    RuleSummary:
      type: object
      properties:
        type:
          type: string
        awardBadge:
          type: string
        awardPoint:
          type: integer

    Rule:
      type: object
      properties:
        type:
          type: string
        awardBadge:
          type: string
        awardPoint:
          type: integer

  parameters:
    TokenHeader:
      description: token that identifies the application sending the event
      name: X-API-KEY
      in: header
      required: true
      schema:
        type: string
